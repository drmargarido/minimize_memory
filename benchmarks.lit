@add_css custom.css

@s Purpose of the Benchmarks

In the past people said 64kb of RAM was enough to do anything. Today we use almost 2GB of RAM just to have our machine running. Programmers keep making each program bigger than the old ones, like all the machines have 64GB of RAM. This leads to the need of constantly getting new hardware, because it looks like our machines are getting slower over time. But the main problem is that the programs are more **inefficient**!

<br/>
Even systems like ubuntu desktop and kubuntu still take between 700MB to 1GB of RAM to be up and running. Its a huge difference if we compare it with something like a basic install of an OpenBSD server, which takes only 20MB of RAM. Of course this comparison is not fair, we are comparing a server which has a command line interface against a distro with a full desktop environment. But if that is the main diffence that makes the system use 35x more RAM, we must try to reduce as much as we can.

<br/>
So the focus of this text will be to create a benchmark on the multiple available graphical stacks so we can understand better what exists, and how we could reduce RAM usage to get better and more durable systems.


@s What to Test

# Note Taking Application

I have bad memory, so usually when I find something nice I write it in some note taking app. But I don't like needing to have some app open that I'm not using most of the time and when searching most of the note apps are not good to search by keyword.

<br/>
So last year I implemented two simple shell scripts one to remember a note(remember) and another to search for some keyword in all my notes(remindme).

<br />
We will be using these scripts as backend so the UIs we will implement only need to have their necessary UI construction code.

<br />
Now I present the code and structure for these scripts:
## Remember
The objective of the remember script is to allow me to just type `remember 'Found cool tech - www.tec.com'` and store the note.

<br />
It receives a string and stores it in a file. If the user does not supply any argument, the program will wait for the user input and will store the note when Ctrl + D is pressed.
--- remember.sh
#!/bin/bash
# remember -- An easy command line based reminder pad

@{Remember File}

@{If No Arguments}
    # Prompt the user for input and append to the rememberfile whatever they wrote.
    echo "Enter note, end with ^D: "
    cat - >> $rememberfile
else
    # Send any arguments passed to the script into the remeberfile.
    echo $@ >> $rememberfile
fi

exit 0
---

## Remindme
The objective of the remindme command is to filter and display notes taken with the remember command.

<br />
It verifies if the rememberfile already exists and displays a warning if not. If the user passed arguments when calling the script it will filter lines in the remember file according to the keywords. If no arguments were passed it displays all the file.

--- remindme.sh
#!/bin/bash

# remindme -- Searches a data file for matching lines or,
# if no argument is specified, shows the entire contents of the data file

@{Remember File}

if [ ! -f $rememberfile ] ; then
    echo "$0: You don't seem to have a .remember file." >&2
    echo "To remedy this, please use 'remember' to add reminders" >&2
    exit 1
fi

@{If No Arguments}
    # Display the whole rememberfile when not given any search criteria.
    more $rememberfile
else
    # Otherwise, search through the file for the given terms, and display the results neatly
    grep -i -- "$@" $rememberfile | ${PAGER:-more}
fi

exit 0
---

The remember file will be an hidden file called .remember in the current user personal directory.

--- Remember File
rememberfile="$HOME/.remember"
---

Validation to check if no arguments were received.
--- If No Arguments
if [ $# -eq 0 ] ; then
---

@s How to Test

In order to have the same base for each test we need to define the needed features for each program and what will be evaluated.

<br/>
Since each pixel will occupy memory we will set the application window to a fixed size of 400x300. The application must have an input field to receive the notes, one button to submit them, a table list area to display the results and a search input to filter the list results for the current text in the search box. We can observe this structure in the following mockup. 
<br/>

![UI Mockup](images/notes_mockup.png)

<br/>
* Parametros de avaliação:
    + Utilização de memória RAM
    + Simplicidade de implementação
    + Multiplataforma

@s Graphical Stacks

Most `Literate` programs share a common structure. It’s probably a good idea to state
the overall structure explicitly at the outset, even though the various parts could all be
introduced in a piecemeal fashion.

